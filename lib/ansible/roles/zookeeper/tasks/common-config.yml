---
- name: "Ensure the zookeeper_conf_dir exists"
  file: path={{ zookeeper_conf_dir }} state=directory
  ignore_errors: True

- name: Ensure zookeeper_user has the ownership of zookeeper directories
  file:
    path: "{{ item }}"
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
    mode: 0755
    state: directory
    recurse: yes
  with_items:
   - "{{ zookeeper_conf_dir }}"
   - "{{ zookeeper_data_dir }}"
   - "{{ zookeeper_log_dir }}"

- name: Configure zookeeper-env.sh
  template: src=zookeeper-env.sh.j2 dest={{ zookeeper_conf_dir }}/conf/zookeeper-env.sh owner= {{ zookeeper_user }} group= {{ zookeeper_group }}
  tags: deploy
  notify:
    - Restart zookeeper
  when: zookeeper_env is defined and zookeeper_env|length > 0

- name: Overwrite default config file
  template: 
    src: zoo.cfg.j2 
    dest: "{{zookeeper_conf_dir}}/conf/zoo.cfg"
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}" 
    force: yes
    mode: 0755

- name: Overwrite myid file.
  template: 
    src: myid.j2 
    dest: "{{zookeeper_data_dir}}/myid"
    force: "{{ zookeeper_force_myid }}" 
    owner: "{{ zookeeper_user }}"
    group: "{{ zookeeper_group }}"
  tags: deploy
  notify:
    - Restart zookeeper

- name: Update the log4j config with saner production values
  template:
    src: log4j.properties.j2 
    dest: "{{ zookeeper_conf_dir }}/conf/log4j.properties" 
    owner: "{{ zookeeper_user }}" 
    group: "{{ zookeeper_group }}"
    force: yes
  tags: deploy
  notify:
    - Restart zookeeper

#- name: Enable zookeeper service
#  service: name=zookeeper enabled=yes  state=reloaded
#  tags: deploy

- name: Start Zookeeper Server
  shell: /usr/bin/zookeeper-server restart
